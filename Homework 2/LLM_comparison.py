#Code generated by ChatGPT


import numpy as np
from scipy.stats import multivariate_normal

def multivariate_normal_density(x, mu, Sigma):
    """Computes the density of a D-dimensional multivariate normal distribution."""
    D = len(mu)
    x, mu = np.asarray(x), np.asarray(mu)
    Sigma = np.asarray(Sigma)
    
    # Compute determinant and inverse of covariance matrix
    det_Sigma = np.linalg.det(Sigma)
    inv_Sigma = np.linalg.inv(Sigma)
    
    # Compute normalization constant
    norm_const = 1 / np.sqrt((2 * np.pi) ** D * det_Sigma)
    
    # Compute exponent term
    diff = x - mu
    exponent = -0.5 * np.dot(diff.T, np.dot(inv_Sigma, diff))
    
    return norm_const * np.exp(exponent)

# Test cases
D = 3  # Number of dimensions

# Spherical Gaussian
mu = np.zeros(D)
Sigma_spherical = np.eye(D) * 2  # Shared variance across dimensions, zero covariance
x = np.array([1, 0, -1])

# Diagonal Gaussian
Sigma_diagonal = np.diag([1, 2, 3])  # Different variance for each dimension

# Full-Covariance Gaussian
Sigma_full = np.array([[1, 0.5, 0.3], [0.5, 2, 0.7], [0.3, 0.7, 3]])

# Compare outputs with SciPy
for Sigma, name in zip([Sigma_spherical, Sigma_diagonal, Sigma_full],
                        ["Spherical", "Diagonal", "Full-Covariance"]):
    my_density = multivariate_normal_density(x, mu, Sigma)
    scipy_density = multivariate_normal(mean=mu, cov=Sigma).pdf(x)
    print(f"{name} Gaussian:")
    print(f"  My function: {my_density}")
    print(f"  SciPy: {scipy_density}\n")